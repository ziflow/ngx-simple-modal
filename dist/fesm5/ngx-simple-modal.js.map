{"version":3,"file":"ngx-simple-modal.js","sources":["ng://ngx-simple-modal/simple-modal/simple-modal-options.ts","ng://ngx-simple-modal/simple-modal/simple-modal-wrapper.component.ts","ng://ngx-simple-modal/simple-modal/simple-modal-holder.component.ts","ng://ngx-simple-modal/simple-modal/simple-modal.service.ts","ng://ngx-simple-modal/simple-modal/simple-modal-service.factory.ts","ng://ngx-simple-modal/simple-modal/simple-modal.module.ts","ng://ngx-simple-modal/simple-modal/simple-modal.component.ts","ng://ngx-simple-modal/ngx-simple-modal.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const DefaultSimpleModalOptionConfig = new InjectionToken<SimpleModalOptions>('default-simple-modal.config');\n\nexport interface SimpleModalOptions {\n  closeOnEscape: boolean;\n  closeOnClickOutside: boolean;\n  bodyClass: string;\n  wrapperDefaultClasses: string;\n  wrapperClass: string;\n  animationDuration: number;\n  autoFocus: boolean;\n}\n\nexport type SimpleModalOptionsOverrides = Partial<SimpleModalOptions>;\n\nexport const defaultSimpleModalOptions: SimpleModalOptions = {\n  closeOnEscape: false,\n  closeOnClickOutside: false,\n  bodyClass: 'modal-open',\n  wrapperDefaultClasses: 'modal fade-anim',\n  wrapperClass: 'in',\n  animationDuration: 300,\n  autoFocus: false\n};\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ElementRef,\n  OnDestroy,\n  ReflectiveInjector,\n  Type,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { SimpleModalComponent } from './simple-modal.component';\n\n/**\n * The modal backdrop wrapping wrapper to the modal\n */\n@Component({\n  selector: 'simple-modal-wrapper',\n  template: `\n    <div #wrapper [ngClass]=\"modalClasses\" [ngStyle]=\"{ display: 'block' }\" role=\"dialog\">\n      <ng-template #viewContainer></ng-template>\n    </div>\n  `,\n})\nexport class SimpleModalWrapperComponent implements OnDestroy {\n  /**\n   * Target viewContainer to insert modal content component\n   */\n  @ViewChild('viewContainer', { read: ViewContainerRef, static: true }) viewContainer;\n\n  /**\n   * Link wrapper DOM element\n   */\n  @ViewChild('wrapper', { read: ElementRef, static: true })\n  wrapper: ElementRef;\n\n  /**\n   * Wrapper modal and fade classes\n   */\n  modalClasses = 'modal fade-anim';\n\n  /**\n   * Dialog content componet\n   * @type {SimpleModalComponent}\n   */\n  content: SimpleModalComponent<any, any>;\n\n  /**\n   * Click outside callback\n   */\n  clickOutsideCallback: (event) => void;\n\n  /**\n   * Constructor\n   * @param {ComponentFactoryResolver} resolver\n   */\n  constructor(private resolver: ComponentFactoryResolver) {}\n\n  /**\n   * Adds content modal component to wrapper\n   * @param {Type<SimpleModalComponent>} component\n   * @return {SimpleModalComponent}\n   */\n  addComponent<T, T1>(component: Type<SimpleModalComponent<T, T1>>) {\n    const factory = this.resolver.resolveComponentFactory(component);\n    const injector = ReflectiveInjector.fromResolvedProviders([], this.viewContainer.injector);\n    const componentRef = factory.create(injector);\n    this.viewContainer.insert(componentRef.hostView);\n    this.content = <SimpleModalComponent<T, T1>>componentRef.instance;\n    this.content.wrapper = this.wrapper;\n    return this.content;\n  }\n\n  /**\n   * Configures the function to call when you click on background of a modal but not the contents\n   * @param callback\n   */\n  onClickOutsideModalContent(callback: () => void) {\n    this.clickOutsideCallback = event => {\n        if (event.target === containerEl) {\n            callback();\n        }\n    };\n    const containerEl = this.wrapper.nativeElement;\n\n    containerEl.addEventListener('click', this.clickOutsideCallback, false);\n  }\n\n  ngOnDestroy() {\n    if (this.clickOutsideCallback) {\n      const containerEl = this.wrapper.nativeElement;\n      containerEl.removeEventListener('click', this.clickOutsideCallback, false);\n      this.clickOutsideCallback = null;\n    }\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ElementRef,\n  Inject,\n  Type,\n  ViewContainerRef,\n  ViewChild,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  DefaultSimpleModalOptionConfig,\n  SimpleModalOptions,\n  SimpleModalOptionsOverrides,\n} from './simple-modal-options';\nimport { SimpleModalWrapperComponent } from './simple-modal-wrapper.component';\nimport { SimpleModalComponent } from './simple-modal.component';\n\n/**\n * View container manager which manages a list of modals currently active\n * inside the viewvontainer\n */\n@Component({\n  selector: 'simple-modal-holder',\n  template: '<ng-template #viewContainer></ng-template>',\n})\nexport class SimpleModalHolderComponent {\n  /**\n   * Target viewContainer to insert modals\n   */\n  @ViewChild('viewContainer', { read: ViewContainerRef, static: true }) viewContainer;\n\n  /**\n   * modal collection, maintained by addModal and removeModal\n   * @type {Array<SimpleModalComponent> }\n   */\n  modals: Array<SimpleModalComponent<any, any>> = [];\n\n  /**\n   * if auto focus is on and no element focused, store it here to be restored back after close\n   */\n  previousActiveElement = null;\n\n  /**\n   * Constructor\n   * @param {ComponentFactoryResolver} resolver\n   */\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    @Inject(DefaultSimpleModalOptionConfig) private defaultSimpleModalOptions: SimpleModalOptions\n  ) {}\n\n  /**\n   * Configures then adds modal to the modals array, and populates with data passed in\n   * @param {Type<SimpleModalComponent>} component\n   * @param {object?} data\n   * @param {SimpleModalOptionsOverrides?} options\n   * @return {Observable<*>}\n   */\n  addModal<T, T1>(\n    component: Type<SimpleModalComponent<T, T1>>,\n    data?: T,\n    options?: SimpleModalOptionsOverrides\n  ): Observable<T1> {\n    // create component\n    if (!this.viewContainer) {\n      return of(null);\n    }\n    const factory = this.resolver.resolveComponentFactory(SimpleModalWrapperComponent);\n    const componentRef = this.viewContainer.createComponent(factory);\n    const modalWrapper: SimpleModalWrapperComponent = <SimpleModalWrapperComponent>(\n      componentRef.instance\n    );\n    const _component: SimpleModalComponent<T, T1> = modalWrapper.addComponent(component);\n\n    // assign options refs\n    _component.options = options = Object.assign({}, this.defaultSimpleModalOptions, options);\n\n    // set base classes for wrapper\n    modalWrapper.modalClasses = options.wrapperDefaultClasses;\n\n    // add to stack\n    this.modals.push(_component);\n\n    // wait a tick then setup the following while adding a modal\n    this.wait().then(() => {\n      this.toggleWrapperClass(modalWrapper.wrapper, options.wrapperClass);\n      this.toggleBodyClass(options.bodyClass);\n      this.wait(options.animationDuration).then(() => {\n        this.autoFocusFirstElement(_component.wrapper, options.autoFocus);\n        _component.markAsReady();\n      });\n    });\n\n    // when closing modal remove it\n    _component.onClosing(modal => this.removeModal(modal));\n\n    // if clicking on background closes modal\n    this.configureCloseOnClickOutside(modalWrapper);\n\n    // map and return observable\n    _component.mapDataObject(data);\n\n    return _component.setupObserver();\n  }\n\n  /**\n   * triggers components close function\n   * to take effect\n   * @param {SimpleModalComponent} component\n   * @returns {Promise<void>}\n   */\n  removeModal(closingModal: SimpleModalComponent<any, any>): Promise<any> {\n    const options = closingModal.options;\n    this.toggleWrapperClass(closingModal.wrapper, options.wrapperClass);\n    return this.wait(options.animationDuration).then(() => {\n      this.removeModalFromArray(closingModal);\n      this.toggleBodyClass(options.bodyClass);\n      this.restorePreviousFocus();\n    });\n  }\n\n  /**\n   * Instructs all open modals to\n   */\n  removeAllModals(): Promise<any> {\n    return Promise.all(this.modals.map(modal => this.removeModal(modal)));\n  }\n\n  /**\n   * Bind a body class 'modal-open' to a condition of modals in pool > 0\n   * @param bodyClass - string to add and remove from body in document\n   */\n  private toggleBodyClass(bodyClass: string) {\n    if (!bodyClass) {\n      return;\n    }\n    const body = document.getElementsByTagName('body')[0];\n    const bodyClassItems = bodyClass.split(' ');\n    if (!this.modals.length) {\n      body.classList.remove(...bodyClassItems);\n    } else {\n      body.classList.add(...bodyClassItems);\n    }\n  }\n\n  /**\n   * if the option to close on background click is set, then hook up a callback\n   * @param options\n   * @param modalWrapper\n   */\n  private configureCloseOnClickOutside(modalWrapper: SimpleModalWrapperComponent) {\n    if (modalWrapper.content.options.closeOnClickOutside) {\n      modalWrapper.onClickOutsideModalContent(() => {\n        modalWrapper.content.close();\n      });\n    }\n  }\n\n  /**\n   * Auto focus o the first element if autofocus is on\n   * @param options\n   * @param modalWrapperEl\n   */\n  private autoFocusFirstElement(componentWrapper: ElementRef, autoFocus: boolean) {\n    if (autoFocus) {\n      const focusable = componentWrapper.nativeElement.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n      if (focusable && focusable.length) {\n        this.previousActiveElement = document.activeElement;\n        focusable[0].focus();\n      }\n    }\n  }\n\n  /**\n   * Restores the last focus is there was one\n   */\n  private restorePreviousFocus() {\n    if (this.previousActiveElement) {\n      this.previousActiveElement.focus();\n      this.previousActiveElement = null;\n    }\n  }\n\n  /**\n   * Configure the adding and removal of a wrapper class - predominantly animation focused\n   * @param options\n   * @param modalWrapperEl\n   */\n  private toggleWrapperClass(modalWrapperEl: ElementRef, wrapperClass: string) {\n    const wrapperClassList = modalWrapperEl.nativeElement.classList;\n    const wrapperClassItems = wrapperClass.split(' ');\n    if (wrapperClassList.toString().indexOf(wrapperClass) !== -1) {\n      wrapperClassList.remove(...wrapperClassItems);\n    } else {\n      wrapperClassList.add(...wrapperClassItems);\n    }\n  }\n\n  /**\n   * Helper function for a more readable timeout\n   * @param ms\n   */\n  private wait(ms: number = 0) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => resolve(), ms);\n    });\n  }\n\n  /**\n   * Instructs the holder to remove the modal and\n   * removes this component from the collection\n   * @param {SimpleModalComponent} component\n   */\n  private removeModalFromArray(component) {\n    const index = this.modals.indexOf(component);\n    if (index > -1) {\n      this.viewContainer.remove(index);\n      this.modals.splice(index, 1);\n    }\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n  Optional,\n  Type,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { SimpleModalHolderComponent } from './simple-modal-holder.component';\nimport { SimpleModalComponent } from './simple-modal.component';\nimport { SimpleModalOptionsOverrides } from './simple-modal-options';\n\nexport class SimpleModalServiceConfig {\n  container: HTMLElement | string = null;\n}\n\n@Injectable()\nexport class SimpleModalService {\n  /**\n   * Placeholder of modals\n   * @type {SimpleModalHolderComponent}\n   */\n  private modalHolderComponent: SimpleModalHolderComponent;\n\n  /**\n   * HTML container for modals\n   * type {HTMLElement | string}\n   */\n  private _container;\n\n  /**\n   * @param {ComponentFactoryResolver} resolver\n   * @param {ApplicationRef} applicationRef\n   * @param {Injector} injector\n   * @param {SimpleModalServiceConfig} config\n   */\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private applicationRef: ApplicationRef,\n    private injector: Injector,\n    @Optional() config: SimpleModalServiceConfig\n  ) {\n    if (config) {\n      this.container = config.container as any;\n    }\n  }\n\n  /**\n   * Adds modal\n   * @param {Type<SimpleModalComponent<T, T1>>} component\n   * @param {T?} data\n   * @param {SimpleModalOptionsOverrides?} options\n   * @return {Observable<T1>}\n   */\n  addModal<T, T1>(\n    component: Type<SimpleModalComponent<T, T1>>,\n    data?: T,\n    options?: SimpleModalOptionsOverrides\n  ): Observable<T1> {\n    if (!this.modalHolderComponent) {\n      this.modalHolderComponent = this.createSimpleModalHolder();\n    }\n    return this.modalHolderComponent.addModal<T, T1>(component, data, options);\n  }\n\n  /**\n   * Hides and removes modal from DOM, resolves promise when fully removed\n   * @param {SimpleModalComponent} component\n   * @return {Promise<{}>}\n\n   */\n  removeModal(component: SimpleModalComponent<any, any>): Promise<{}> {\n    if (!this.modalHolderComponent) {\n      return Promise.resolve({});\n    }\n    return this.modalHolderComponent.removeModal(component);\n  }\n\n  /**\n   * Closes all modals, resolves promise when they're fully removed\n   * @return {Promise<{}>}\n   */\n  removeAll(): Promise<{}> {\n    if (!this.modalHolderComponent) {\n      return Promise.resolve({});\n    }\n    return this.modalHolderComponent.removeAllModals();\n  }\n\n  /**\n   * Accessor for contain - will auto generate from string\n   * if needed or default to the root element if nothing was set\n   */\n\n  private set container(c) {\n    this._container = c;\n  }\n\n  private get container(): HTMLElement {\n    if (typeof this._container === 'string') {\n      this._container = document.getElementById(this._container);\n    }\n\n    if (!this._container && this.applicationRef['components'].length) {\n      const componentRootViewContainer = this.applicationRef['components'][0];\n      this.container = (componentRootViewContainer.hostView as EmbeddedViewRef<any>)\n        .rootNodes[0] as HTMLElement;\n    }\n\n    // fallback\n    if (!this._container || typeof this._container === 'string') {\n      this._container = document.getElementsByTagName('body')[0];\n    }\n\n    return this._container;\n  }\n\n  /**\n   * Creates and add to DOM modal holder component\n   * @return {SimpleModalHolderComponent}\n   */\n  private createSimpleModalHolder(): SimpleModalHolderComponent {\n    const componentFactory = this.resolver.resolveComponentFactory(SimpleModalHolderComponent);\n\n    const componentRef = componentFactory.create(this.injector);\n    const componentRootNode = (componentRef.hostView as EmbeddedViewRef<any>)\n      .rootNodes[0] as HTMLElement;\n\n    this.applicationRef.attachView(componentRef.hostView);\n\n    componentRef.onDestroy(() => {\n      this.applicationRef.detachView(componentRef.hostView);\n    });\n\n    this.container.appendChild(componentRootNode);\n\n    return componentRef.instance;\n  }\n}\n","import { ApplicationRef, ComponentFactoryResolver, Injector } from '@angular/core';\n\nimport { SimpleModalService, SimpleModalServiceConfig } from './simple-modal.service';\n\n/**\n * Modal service factory. Creates modal service with options\n * @param { ComponentFactoryResolver } resolver\n * @param { ApplicationRef } applicationRef\n * @param { Injector } injector\n * @param { SimpleModalServiceConfig } options\n * @return { SimpleModalService }\n */\nexport function SimpleModalServiceFactory(resolver: ComponentFactoryResolver,\n                                          applicationRef: ApplicationRef,\n                                          injector: Injector,\n                                          options: SimpleModalServiceConfig) {\n    return new SimpleModalService(resolver, applicationRef, injector, options);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Injector,\n  ModuleWithProviders,\n  NgModule,\n} from '@angular/core';\n\nimport { SimpleModalHolderComponent } from './simple-modal-holder.component';\nimport { SimpleModalWrapperComponent } from './simple-modal-wrapper.component';\nimport { SimpleModalService, SimpleModalServiceConfig } from './simple-modal.service';\nimport { SimpleModalServiceFactory } from './simple-modal-service.factory';\nimport {\n  defaultSimpleModalOptions,\n  DefaultSimpleModalOptionConfig,\n  SimpleModalOptions,\n} from './simple-modal-options';\n\n@NgModule({\n  declarations: [SimpleModalHolderComponent, SimpleModalWrapperComponent],\n  providers: [\n    SimpleModalService,\n    {\n      provide: DefaultSimpleModalOptionConfig,\n      useValue: defaultSimpleModalOptions,\n    },\n  ],\n  imports: [CommonModule],\n  entryComponents: [SimpleModalHolderComponent, SimpleModalWrapperComponent],\n})\nexport class SimpleModalModule {\n  static forRoot(\n    config: SimpleModalServiceConfig,\n    defaultModalOptions?: SimpleModalOptions\n  ): ModuleWithProviders {\n    return {\n      ngModule: SimpleModalModule,\n      providers: [\n        { provide: SimpleModalServiceConfig, useValue: config },\n        {\n          provide: SimpleModalService,\n          useFactory: SimpleModalServiceFactory,\n          deps: [ComponentFactoryResolver, ApplicationRef, Injector, SimpleModalServiceConfig],\n        },\n        {\n          provide: DefaultSimpleModalOptionConfig,\n          useValue: defaultModalOptions || defaultSimpleModalOptions,\n        },\n      ],\n    };\n  }\n\n  constructor() {}\n}\n","import { ElementRef, HostListener, OnDestroy } from '@angular/core';\nimport { Observable, Observer, Subject, BehaviorSubject } from 'rxjs';\n\nimport { SimpleModalOptions } from './simple-modal-options';\n\nexport interface OnDestroyLike {\n  ngOnDestroy(): void;\n  [key: string]: any;\n}\n\n/**\n * Abstract modal\n * @template T - modal data;\n * @template T1 - modal result\n */\nexport abstract class SimpleModalComponent<T, T1> {\n  /**\n   * Observer to return result from modal\n   */\n  private observer: Observer<T1>;\n\n  /**\n   * Dialog result\n   * @type {T1}\n   */\n  result: T1;\n\n  /**\n   * Dialog wrapper (modal placeholder)\n   */\n  wrapper: ElementRef;\n\n  /**\n   * ref of options for this component\n   */\n  options: SimpleModalOptions;\n\n  /**\n   * ready$ is when all animations and focusing have comleted\n   */\n  _ready$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Callback to the holders close function\n   */\n  private closerCallback: (component) => Promise<any> = () => Promise.resolve();\n\n  /**\n   * Constructor\n   */\n  constructor() {}\n\n  /**\n   * Maps your object passed in the creation to fields in your own Dialog classes\n   * @param {T} data\n   */\n  mapDataObject(data: T): void {\n    data = data || <T>{};\n    const keys = Object.keys(data);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      if (typeof data[key] === 'object' && typeof this[key] === 'object') {\n        Object.assign(this[key], data[key]);\n      } else {\n        this[key] = data[key];\n      }\n    }\n  }\n\n  /**\n   * Setup observer\n   * @return {Observable<T1>}\n   */\n  setupObserver(): Observable<T1> {\n    return Observable.create(observer => {\n      this.observer = observer;\n\n      // called if observable is unsubscribed to\n      return () => {\n        this.close();\n      };\n    });\n  }\n\n  /**\n   * Defines what happens when close is called - default this\n   * will just call the default remove modal process. If overriden\n   * must include\n   * @param callback\n   */\n  onClosing(callback: (component: SimpleModalComponent<any, any>) => Promise<any>): void {\n    this.closerCallback = callback;\n  }\n\n  /**\n   * Closes modal\n   */\n  close(): Promise<any> {\n    return this.closerCallback(this).then(v => {\n      if (this.observer) {\n        this.observer.next(this.result);\n        this.observer.complete();\n      }\n      return v;\n    });\n  }\n\n  /**\n   * keypress binding ngx way\n   * @param evt\n   */\n  @HostListener('document:keydown.escape', ['$event'])\n  onKeydownHandler(evt: KeyboardEvent) {\n    if (this.options && this.options.closeOnEscape) {\n      this.close();\n    }\n  }\n\n  get ready$() {\n    return this._ready$.asObservable();\n  }\n\n  markAsReady() {\n    this._ready$.next(true);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {SimpleModalHolderComponent as Éµa} from './simple-modal/simple-modal-holder.component';\nexport {SimpleModalServiceFactory as Éµc} from './simple-modal/simple-modal-service.factory';\nexport {SimpleModalWrapperComponent as Éµb} from './simple-modal/simple-modal-wrapper.component';"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}